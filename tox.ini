# Tox configuration file
# Read more under https://tox.wiki/

[tox]
minversion = 3.24
envlist = py{37,38,39,310}
isolated_build = True


[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    pytest {posargs}


# To run `tox -e lint` you need to make sure you have a
# `.pre-commit-config.yaml` file. See https://pre-commit.com
[testenv:lint]
description =
    Perform static analysis and style checks
skip_install = True
deps = pre-commit
passenv =
    HOMEPATH
    PROGRAMDATA
    SETUPTOOLS_*
commands =
    pre-commit run --all-files


[testenv:{build,clean,cleanall}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
    cleanall: Remove old distribution files and temporary build artifacts including DBNet binaries
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
    build: setuptools_scm[toml]
    build: -rrequirements.txt
conda_deps =
    build: pytorch
    build: torchvision
    build: torchaudio
    build: cudatoolkit=11.3
    build: cudatoolkit-dev
    build: ninja
    build: cxx-compiler=1.3.0
conda_channels =
    pytorch
    conda-forge
passenv =
    SETUPTOOLS_*
commands =
    clean,cleanall: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build", "easyocr/DBNet/assets/ops/dcn/build")]'
    clean,cleanall: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path(".").glob("*.egg-info")]'
    cleanall: python -c 'import pathlib; pathlib.Path("easyocr/DBNet/dcn_compiling_success").unlink(missing_ok=True); pathlib.Path("easyocr/DBNet/log.txt").unlink(missing_ok=True)'
    build: python easyocr/scripts/compile_dbnet_dcn.py
    build: python -m build --no-isolation {posargs}

[testenv:{docs,doctests,linkcheck,autodocs}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
    autodocs: Launch a local webserver to hot reload doc changes
passenv =
    SETUPTOOLS_*
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
    autodocs: sphinx-autobuild
    # ^  requirements.txt shared with Read The Docs
commands =
    docs: sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}
    doctests: sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}
    linkcheck: sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}
    autodocs: sphinx-autobuild docs docs/_build/html

[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_PASSWORD
    TWINE_REPOSITORY
setenv =
    TWINE_USERNAME = {env:TWINE_USERNAME:__token__}
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
