<<<<<<< HEAD
# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = easyocr
description = End-to-End Multi-Lingual Optical Character Recognition (OCR) Solution
author = Rakpong Kittinaradorn
author_email = r.kittinaradorn@gmail.com
license = Apache License 2.0
license_files = LICENSE
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
url = https://github.com/jaidedai/easyocr
# Add here related links, for example:
project_urls =
    # Documentation =
    Source = https://github.com/JaidedAI/EasyOCR
    Changelog = https://github.com/JaidedAI/EasyOCR/blob/master/releasenotes.md
    Tracker = https://github.com/JaidedAI/EasyOCR/issues
    Download = https://pypi.org/project/easyocr/#files
keywords =
    easyocr
    ocr
    optical
    character
    recognition
    deep
    learning
    neural
    network

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 5 - Production/Stable
    Programming Language :: Python


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =.
    # TODO: =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.7

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    typing_extensions; python_version<"3.10"
    torch
    torchvision>=0.5
    opencv-python-headless<=4.5.4.60
    scipy
    numpy
    Pillow
    scikit-image
    python-bidi
    PyYAML
    Shapely
    pyclipper
    ninja


[options.packages.find]
# TODO: src
where = .
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install easyocr[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov
    typing_extensions

[options.entry_points]
# Add here console scripts:
console_scripts =
    easyocr = easyocr.cli:main

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov easyocr --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py
strictness = long
show-source = True
max-line-length = 100
max-complexity = 6
# TODO: numpy, google, sphinx?
docstring-style = sphinx
ignore = D100, D104, D401, DAR103, DAR203, E800, N802, Q000, RST303, RST304, W504, WPS326, WPS402, WPS433, WPS436
per-file-ignores =
    # WPS421: Found wrong function call: print
    setup.py: WPS421
    # WPS412: Found `__init__.py` module with logic
    # WPS420: Found wrong keywork: del
    # WPS440: Found block variables overlap: PackageNotFoundError, version
    src/command_based_framework/__init__.py: WPS412, WPS420, WPS440

[isort]
include_trailing_comma = True
use_parentheses = True
multi_line_output = 3
line_length = 100

[mypy]
allow_redefinition = False
check_untyped_defs = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
local_partial_types = True
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True
warn_no_return = True
=======
[metadata]
description_file = README.md
>>>>>>> 06753992c0aa7b9c74f46ce558bba4ba5a28493b
